name: Automated workflow for CI

run-name: Build Unity Game

on:
  workflow_dispatch: 
  push:
    branches:
      - main
      - 'feature/*'

jobs:
  unit-test:
    name: Unit Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
        - .
        testMode:
        - playmode
        - editmode
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Cache
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ hashFiles('Assets/**', 'Packages/**') }}
        restore-keys: |
          Library- 

    - name: Test unity project
      uses: game-ci/unity-test-runner@v4
      id: unit-tests
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: ${{ matrix.projectPath }}
        testMode: ${{ matrix.testMode }}
        artifactsPath: ${{ matrix.testMode }}-artifacts
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        checkName: ${{ matrix.testMode }}-test-results
        coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Test results for ${{ matrix.testMode }} test
        path: ${{ steps.unit-tests.outputs.artifactsPath }}

  build-project:
    name: Build project
    needs: unit-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Cache
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ hashFiles('Assets/**', 'Packages/**') }}
        restore-keys: |
          Library- 

    - name: Build project
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        targetPlatform: StandaloneWindows64

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Build-Artifact
        path: build

  standalone-test:
    name: Standalone Test
    runs-on: ubuntu-latest
    needs: build-project
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Cache
      uses: actions/cache@v4
      with:
        path: Library
        key: Library-${{ hashFiles('Assets/**', 'Packages/**') }}
        restore-keys: |
          Library- 

    - name: Test unity project
      uses: game-ci/unity-test-runner@v4
      id: standalone-test
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: .
        testMode: standalone
        artifactsPath: standalone-artifacts
        githubToken: ${{ secrets.GITHUB_TOKEN }}
        checkName: standalone-test-results
        coverageOptions: 'generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*'
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Test results for standalone test
        path: ${{ steps.standalone-test.outputs.artifactsPath }}